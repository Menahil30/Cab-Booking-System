import tkinter as tk

class CabBookingSystem:
    def __init__(self, admin_id):
        self.driver_names = []
        self.bookings = []
        self.load_data()
        self.admin_id = admin_id

    def load_data(self):
        with open("data.txt", "r") as f:
            lines = f.readlines()
            self.driver_names = lines[0].strip().split(",")
            for line in lines[1:]:
                driver_name, user_id, booking_id, pickup_location, dropoff_location, status = line.strip().split(",")
                self.bookings.append({
                    "admin_id": driver_name,
                    "user_id": int(user_id),
                    "booking_id": int(booking_id),
                    "pickup_location": pickup_location,
                    "dropoff_location": dropoff_location,
                    "status": status
                })

    def save_data(self):
        with open("data.txt", "w") as f:
            driver_names_line = ",".join(self.driver_names)
            f.write(driver_names_line + "\n")
            for booking in self.bookings:
                booking_line = ",".join(str(booking[field]) for field in ["admin_id", "user_id", "booking_id", "pickup_location", "dropoff_location", "status"])
                f.write(booking_line + "\n")

    def book_ride(self):
        pickup_location = self.pickup_entry.get()
        dropoff_location = self.dropoff_entry.get()

        available_drivers = []
        for driver in self.driver_names:
            driver_bookings = [booking for booking in self.bookings if booking["status"] == "available" and booking["pickup_location"] == pickup_location and booking["dropoff_location"] == dropoff_location and booking["admin_id"] == self.admin_id and booking["user_id"] == 0 and booking["admin_id"] == driver]
            if driver_bookings:
                available_drivers.append(driver)

        if not available_drivers:
            self.status_label.config(text="No drivers available")
            return

        driver_name = available_drivers[0]
        booking_id = max(booking["booking_id"] for booking in self.bookings) + 1
        new_booking = {
            "admin_id": self.admin_id,
            "user_id": 0,
            "booking_id": booking_id,
            "pickup_location": pickup_location,
            "dropoff_location": dropoff_location,
            "status": "booked",
            "driver_name": driver_name}
            
        self.bookings.append(new_booking)
        self.save_data()

        self.status_label.config(text=f"Ride booked with booking ID {booking_id}")

    def view_booking_status(self):
        user_bookings = [booking for booking in self.bookings if booking["user_id"] == 0]

        if not user_bookings:
            self.status_label.config(text="No bookings found")
            return

        booking_ids = [booking["booking_id"] for booking in user_bookings]
        booking_id_str = "\n".join(str(booking_id) for booking_id in booking_ids)
        self.status_label.config(text=f"Your bookings:\n{booking_id_str}")
        
    def create_gui(self):
        self.root = tk.Tk()
        self.root.title("Cab Booking System")
        self.root.geometry("400x300")

        # Create GUI elements
        self.pickup_entry = tk.Entry(self.root)
        self.pickup_entry.pack(pady=5)
        self.dropoff_entry = tk.Entry(self.root)
        self.dropoff_entry.pack(pady=5)
        self.book_button = tk.Button(self.root, text="Book Ride", command=self.book_ride)
        self.book_button.pack(pady=10)
        self.status_button = tk.Button(self.root, text="View Booking Status", command=self.view_booking_status)
        self.status_button.pack(pady=10)
        self.status_label = tk.Label(self.root, text="")
        self.status_label.pack(pady=10)

        self.root.mainloop()


cab_system = CabBookingSystem(admin_id="admin")
cab_system.create_gui()

